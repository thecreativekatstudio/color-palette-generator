from flask import Flask, request, jsonify, send_file
from PIL import Image, ImageColor, ImageDraw, ImageFont
import os
import urllib.parse
import io

app = Flask(__name__)

@app.route('/')
def home():
    return 'Color Palette Generator is running!'

@app.route('/generate', methods=['GET'])
def generate_palette():
    # Get the 'colors' query parameter (the hex codes)
    colors_param = request.args.get('colors', '').strip()

    # Log received colors for debugging
    print(f"Received colors query: {colors_param}")

    if not colors_param:
        return jsonify({'error': 'No colors provided. Please provide a comma-separated list of hex colors.'}), 400

    colors_param = urllib.parse.unquote(colors_param)
    hex_codes = colors_param.split(',')

    if '' in hex_codes:
        return jsonify({'error': 'Invalid colors format. Please provide valid comma-separated hex colors.'}), 400

    try:
        # **Set canvas size**
        palette_width = 1000  # Fixed width
        palette_height = 320  # Slightly taller for better spacing

        color_block_width = palette_width // len(hex_codes)  # Adjust block width dynamically
        color_block_height = 200  # Increased height for better visibility

        # **Create the image canvas**
        palette_image = Image.new('RGB', (palette_width, palette_height), "white")
        draw = ImageDraw.Draw(palette_image)

        # **Load fonts** (fallback to default if unavailable)
        try:
            title_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 30)
            text_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 18)
        except IOError:
            title_font = ImageFont.load_default()
            text_font = ImageFont.load_default()

        # **Draw title**
        title_text = "Color Palette Generated by Pixie"
        title_width, title_height = draw.textbbox((0, 0), title_text, font=title_font)[2:]
        draw.text(((palette_width - title_width) // 2, 10), title_text, fill="black", font=title_font)

        # **Draw each color swatch**
        for i, hex_code in enumerate(hex_codes):
            try:
                rgb_color = ImageColor.getrgb(hex_code.strip())

                # **Color block**
                x1, y1 = i * color_block_width, 50
                x2, y2 = x1 + color_block_width, 50 + color_block_height
                draw.rectangle([x1, y1, x2, y2], fill=rgb_color)

                # **Hex code text below each color, centered horizontally**
                text_width, text_height = draw.textbbox((0, 0), hex_code.strip(), font=text_font)[2:]
                text_x = x1 + (color_block_width - text_width) // 2
                text_y = y2 + 10  # Increased spacing from color block
                draw.text((text_x, text_y), hex_code.strip(), font=text_font, fill="black")

            except ValueError:
                return jsonify({'error': f'Invalid color specifier: {hex_code}'}), 400

        # **Footer with company name, moved slightly lower for better spacing**
        footer_text = "The Creative Kat Studio"
        footer_width, footer_height = draw.textbbox((0, 0), footer_text, font=text_font)[2:]
        draw.text(((palette_width - footer_width) // 2, palette_height - 35), footer_text, fill="black", font=text_font)

        # **Convert to bytes for serving as a file**
        img_byte_arr = io.BytesIO()
        palette_image.save(img_byte_arr, format='PNG')
        img_byte_arr.seek(0)

        return send_file(img_byte_arr, mimetype='image/png', as_attachment=True, download_name='palette.png')

    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
